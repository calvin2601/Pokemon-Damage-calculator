# Decompiled with PyLingual (https://pylingual.io)
# Internal filename: v0.2.py
# Bytecode version: 3.7.0 (3394)
# Source timestamp: 1970-01-01 00:00:00 UTC (0)

import tkinter as tk
window = tk.Tk()
window.title('Normalized Dam Calc')
window.rowconfigure([0, 1, 2], minsize=1)
window.columnconfigure([0, 1], minsize=1)

def Normalize_attack(a, b, c):
    try:
        Base_Stat = PABaSt_var.get()
        Base_power = int(PABaPo_var.get())
        NBS = int(Base_Stat) + cbox_PA252_var.get()
        if variable_PAnature.get() == 'Incr.':
            multiplier = 1.1
        elif variable_PAnature.get() == 'Decr.':
            multiplier = 0.9
        else:
            multiplier = 1.0
        STAB = cbox_PASTAB_var.get()
        TypeEff = var_PAtypeeff.get()
        multiplier *= STAB
        multiplier *= TypeEff
        statistical_damage = NBS * Base_power * multiplier
        lbl_PAStatDamage_result['text'] = str(int(statistical_damage))
        PDBase_Stat = PDBaSt_var.get()
        PDNBS = int(PDBase_Stat) + cbox_PD252_var.get()
        if variable_PDNature.get() == 'Incr.':
            PDmultiplier = 1.1
        elif variable_PDNature.get() == 'Decr.':
            PDmultiplier = 0.9
        else:
            PDmultiplier = 1.0
        PDNBS *= PDmultiplier
        HPNBS = int(HPBaSt_var.get()) / 4 + cbox_HP252_var.get()
        result = PDNBS * HPNBS
        lbl_PDStaDef_result['text'] = str(int(result))
        lbl_min_Phys_res['text'] = f'{statistical_damage * 9 / result:.1f}'
        lbl_max_Phys_res['text'] = f'{statistical_damage * 10.5 / result:.1f}'
    except:
        ValueError
        pass

def Special_Damage(a, b, c):
    try:
        NBS = int(SABaSt_var.get()) + cbox_SA252_var.get()
        if variable_SAnature.get() == 'Incr.':
            multiplier = 1.1
        elif variable_SAnature.get() == 'Decr.':
            multiplier = 0.9
        else:
            multiplier = 1.0
        STAB = cbox_SASTAB_var.get()
        TypeEff = var_SAtypeeff.get()
        statistical_damage = NBS * multiplier * STAB * TypeEff * int(SABaPo_var.get())
        lbl_SAStatDamage_result['text'] = str(int(statistical_damage))
        SDNBS = int(SDBaSt_var.get()) + cbox_SD252_var.get()
        if variable_SDNature.get() == 'Incr.':
            SDmultiplier = 1.1
        elif variable_SDNature.get() == 'Decr.':
            SDmultiplier = 0.9
        else:
            SDmultiplier = 1.0
        SDNBS *= SDmultiplier
        SDHPNBS = int(SDHPBaSt_var.get()) / 4 + cbox_SDHP252_var.get()
        result = SDNBS * SDHPNBS
        lbl_SDStaDef_result['text'] = str(int(result))
        lbl_min_Spec_res['text'] = f'{statistical_damage * 9 / result:.1f}'
        lbl_max_Spec_res['text'] = f'{statistical_damage * 10.5 / result:.1f}'
    except:
        ValueError
        pass
frame_PA = tk.Frame()
lbl_titlePA = tk.Label(master=frame_PA, text='Phy Att\n', fg='red')
lbl_titlePA.config(font=36)
lbl_titlePA.grid(row=0, column=0, sticky='w')
lbl_PABaSt = tk.Label(master=frame_PA, text='Base Stat')
lbl_PABaSt.grid(row=1, column=0, sticky='e')
PABaSt_var = tk.StringVar()
PABaSt_var.set('0')
PABaSt_var.trace('w', Normalize_attack)
entry_PABaSt = tk.Entry(master=frame_PA, width=5, textvariable=PABaSt_var)
entry_PABaSt.grid(row=1, column=1)
lbl_PABaPo = tk.Label(master=frame_PA, text='Base Power Move')
lbl_PABaPo.grid(row=2, column=0, sticky='e')
PABaPo_var = tk.StringVar()
PABaPo_var.set('0')
PABaPo_var.trace('w', Normalize_attack)
entry_PABaPo = tk.Entry(master=frame_PA, width=5, textvariable=PABaPo_var)
entry_PABaPo.grid(row=2, column=1)
lbl_PA252 = tk.Label(master=frame_PA, text='252 EVs')
lbl_PA252.grid(row=3, column=0, sticky='e')
cbox_PA252_var = tk.IntVar()
cbox_PA252_var.set(18)
cbox_PA252_var.trace('w', Normalize_attack)
cbox_PA252 = tk.Checkbutton(master=frame_PA, variable=cbox_PA252_var, onvalue=50, offvalue=18)
cbox_PA252.grid(row=3, column=1)
NatureList = ['Incr.', 'Neutral', 'Decr.']
lbl_PANature = tk.Label(master=frame_PA, text='Nature')
lbl_PANature.grid(row=4, column=0, sticky='e')
variable_PAnature = tk.StringVar()
variable_PAnature.set(NatureList[1])
variable_PAnature.trace('w', Normalize_attack)
optmenu_PANature = tk.OptionMenu(frame_PA, variable_PAnature, *NatureList)
optmenu_PANature.config(width=6)
optmenu_PANature.grid(row=4, column=1)
lbl_PASTAB = tk.Label(master=frame_PA, text='STAB')
lbl_PASTAB.grid(row=5, column=0, sticky='e')
cbox_PASTAB_var = tk.DoubleVar()
cbox_PASTAB_var.set(1.0)
cbox_PASTAB_var.trace('w', Normalize_attack)
cbox_PASTAB = tk.Checkbutton(master=frame_PA, variable=cbox_PASTAB_var, onvalue=1.5, offvalue=1.0)
cbox_PASTAB.grid(row=5, column=1)
EffectiveList = [0.25, 0.5, 1.0, 2.0, 4.0]
lbl_PATypeEff = tk.Label(master=frame_PA, text='Type Effectiveness')
lbl_PATypeEff.grid(row=6, column=0, sticky='e')
var_PAtypeeff = tk.DoubleVar()
var_PAtypeeff.set(EffectiveList[2])
var_PAtypeeff.trace('w', Normalize_attack)
optmenu_PATypeEff = tk.OptionMenu(frame_PA, var_PAtypeeff, *EffectiveList)
optmenu_PATypeEff.config(width=6)
optmenu_PATypeEff.grid(row=6, column=1)
lbl_PAStatDamage = tk.Label(master=frame_PA, text='Statistical Damage')
lbl_PAStatDamage.grid(row=7, column=0, sticky='e')
lbl_PAStatDamage_result = tk.Label(master=frame_PA, text='-------')
lbl_PAStatDamage_result.grid(row=7, column=1)
frame_PA.grid(row=0, column=0)
frame_SA = tk.Frame()
lbl_titleSA = tk.Label(master=frame_SA, text='Spe Att\n', fg='red')
lbl_titleSA.config(font=36)
lbl_titleSA.grid(row=0, column=0, sticky='w')
lbl_SABaSt = tk.Label(master=frame_SA, text='Base Stat')
lbl_SABaSt.grid(row=1, column=0, sticky='e')
SABaSt_var = tk.StringVar()
SABaSt_var.set('0')
SABaSt_var.trace('w', Special_Damage)
entry_SABaSt = tk.Entry(master=frame_SA, width=5, textvariable=SABaSt_var)
entry_SABaSt.grid(row=1, column=1)
lbl_SABaPo = tk.Label(master=frame_SA, text='Base Power Move')
lbl_SABaPo.grid(row=2, column=0, sticky='e')
SABaPo_var = tk.StringVar()
SABaPo_var.set('0')
SABaPo_var.trace('w', Special_Damage)
entry_SABaPo = tk.Entry(master=frame_SA, width=5, textvariable=SABaPo_var)
entry_SABaPo.grid(row=2, column=1)
lbl_SA252 = tk.Label(master=frame_SA, text='252 EVs')
lbl_SA252.grid(row=3, column=0, sticky='e')
cbox_SA252_var = tk.IntVar()
cbox_SA252_var.set(18)
cbox_SA252_var.trace('w', Special_Damage)
cbox_SA252 = tk.Checkbutton(master=frame_SA, variable=cbox_SA252_var, onvalue=50, offvalue=18)
cbox_SA252.grid(row=3, column=1)
NatureList = ['Incr.', 'Neutral', 'Decr.']
lbl_SANature = tk.Label(master=frame_SA, text='Nature')
lbl_SANature.grid(row=4, column=0, sticky='e')
variable_SAnature = tk.StringVar()
variable_SAnature.set(NatureList[1])
variable_SAnature.trace('w', Special_Damage)
optmenu_SANature = tk.OptionMenu(frame_SA, variable_SAnature, *NatureList)
optmenu_SANature.config(width=6)
optmenu_SANature.grid(row=4, column=1)
lbl_SASTAB = tk.Label(master=frame_SA, text='STAB')
lbl_SASTAB.grid(row=5, column=0, sticky='e')
cbox_SASTAB_var = tk.DoubleVar()
cbox_SASTAB_var.set(1.0)
cbox_SASTAB_var.trace('w', Special_Damage)
cbox_SASTAB = tk.Checkbutton(master=frame_SA, variable=cbox_SASTAB_var, onvalue=1.5, offvalue=1.0)
cbox_SASTAB.grid(row=5, column=1)
EffectiveList = [0.25, 0.5, 1.0, 2.0, 4.0]
lbl_SATypeEff = tk.Label(master=frame_SA, text='Type Effectiveness')
lbl_SATypeEff.grid(row=6, column=0, sticky='e')
var_SAtypeeff = tk.DoubleVar()
var_SAtypeeff.set(EffectiveList[2])
var_SAtypeeff.trace('w', Special_Damage)
optmenu_SATypeEff = tk.OptionMenu(frame_SA, var_SAtypeeff, *EffectiveList)
optmenu_SATypeEff.config(width=6)
optmenu_SATypeEff.grid(row=6, column=1)
lbl_SAStatDamage = tk.Label(master=frame_SA, text='Statistical Damage')
lbl_SAStatDamage.grid(row=7, column=0, sticky='e')
lbl_SAStatDamage_result = tk.Label(master=frame_SA, text='-------')
lbl_SAStatDamage_result.grid(row=7, column=1)
frame_SA.grid(row=0, column=1)
frame_PD = tk.Frame()
lbl_titlePD = tk.Label(master=frame_PD, text='Phy Def\n', fg='red')
lbl_titlePD.config(font=36)
lbl_titlePD.grid(row=0, column=0, sticky='w')
lbl_PDBaSt = tk.Label(master=frame_PD, text='Base Def Stat')
lbl_PDBaSt.grid(row=1, column=0, sticky='e')
PDBaSt_var = tk.StringVar()
PDBaSt_var.set('0')
PDBaSt_var.trace('w', Normalize_attack)
entry_PDBaSt = tk.Entry(master=frame_PD, width=5, textvariable=PDBaSt_var)
entry_PDBaSt.grid(row=1, column=1)
lbl_PD252 = tk.Label(master=frame_PD, text='252 Def EVs')
lbl_PD252.grid(row=2, column=0, sticky='e')
cbox_PD252_var = tk.IntVar()
cbox_PD252_var.set(18)
cbox_PD252_var.trace('w', Normalize_attack)
cbox_PD252 = tk.Checkbutton(master=frame_PD, variable=cbox_PD252_var, onvalue=50, offvalue=18)
cbox_PD252.grid(row=2, column=1)
lbl_PDNature = tk.Label(master=frame_PD, text='Def Nature')
lbl_PDNature.grid(row=3, column=0, sticky='e')
variable_PDNature = tk.StringVar()
variable_PDNature.set(NatureList[1])
variable_PDNature.trace('w', Normalize_attack)
optmenu_PDNat = tk.OptionMenu(frame_PD, variable_PDNature, *NatureList)
optmenu_PDNat.config(width=6)
optmenu_PDNat.grid(row=3, column=1)
lbl_HPBaSt = tk.Label(master=frame_PD, text='Base HP Stat')
lbl_HPBaSt.grid(row=4, column=0, sticky='e')
HPBaSt_var = tk.StringVar()
HPBaSt_var.set('0')
HPBaSt_var.trace('w', Normalize_attack)
entry_HPBaSt = tk.Entry(master=frame_PD, width=5, textvariable=HPBaSt_var)
entry_HPBaSt.grid(row=4, column=1)
lbl_HP252 = tk.Label(master=frame_PD, text='252 HP EVs')
lbl_HP252.grid(row=5, column=0, sticky='e')
cbox_HP252_var = tk.IntVar()
cbox_HP252_var.set(18)
cbox_HP252_var.trace('w', Normalize_attack)
cbox_HP252 = tk.Checkbutton(master=frame_PD, variable=cbox_HP252_var, onvalue=25, offvalue=18)
cbox_HP252.grid(row=5, column=1)
lbl_PDStaDef = tk.Label(master=frame_PD, text='Statistical Defense')
lbl_PDStaDef.grid(row=6, column=0, sticky='e')
lbl_PDStaDef_result = tk.Label(master=frame_PD, text='-------')
lbl_PDStaDef_result.grid(row=6, column=1)
frame_PD.grid(row=1, column=0)
frame_SD = tk.Frame()
lbl_titleSD = tk.Label(master=frame_SD, text='Sp. Def\n', fg='red')
lbl_titleSD.config(font=36)
lbl_titleSD.grid(row=0, column=0, sticky='w')
lbl_SDBaSt = tk.Label(master=frame_SD, text='Base Sp. Def Stat')
lbl_SDBaSt.grid(row=1, column=0, sticky='e')
SDBaSt_var = tk.StringVar()
SDBaSt_var.set('0')
SDBaSt_var.trace('w', Special_Damage)
entry_SDBaSt = tk.Entry(master=frame_SD, width=5, textvariable=SDBaSt_var)
entry_SDBaSt.grid(row=1, column=1)
lbl_SD252 = tk.Label(master=frame_SD, text='252 Sp. Def EVs')
lbl_SD252.grid(row=2, column=0, sticky='e')
cbox_SD252_var = tk.IntVar()
cbox_SD252_var.set(18)
cbox_SD252_var.trace('w', Special_Damage)
cbox_SD252 = tk.Checkbutton(master=frame_SD, variable=cbox_SD252_var, onvalue=50, offvalue=18)
cbox_SD252.grid(row=2, column=1)
lbl_SDNature = tk.Label(master=frame_SD, text='Def Nature')
lbl_SDNature.grid(row=3, column=0, sticky='e')
variable_SDNature = tk.StringVar()
variable_SDNature.set(NatureList[1])
variable_SDNature.trace('w', Special_Damage)
optmenu_SDNat = tk.OptionMenu(frame_SD, variable_SDNature, *NatureList)
optmenu_SDNat.config(width=6)
optmenu_SDNat.grid(row=3, column=1)
lbl_HPBaSt = tk.Label(master=frame_SD, text='Base HP Stat')
lbl_HPBaSt.grid(row=4, column=0, sticky='e')
SDHPBaSt_var = tk.StringVar()
SDHPBaSt_var.set('0')
SDHPBaSt_var.trace('w', Special_Damage)
entry_HPBaSt = tk.Entry(master=frame_SD, width=5, textvariable=SDHPBaSt_var)
entry_HPBaSt.grid(row=4, column=1)
lbl_HP252 = tk.Label(master=frame_SD, text='252 HP EVs')
lbl_HP252.grid(row=5, column=0, sticky='e')
cbox_SDHP252_var = tk.IntVar()
cbox_SDHP252_var.set(18)
cbox_SDHP252_var.trace('w', Special_Damage)
cbox_HP252 = tk.Checkbutton(master=frame_SD, variable=cbox_SDHP252_var, onvalue=25, offvalue=18)
cbox_HP252.grid(row=5, column=1)
lbl_SDStaDef = tk.Label(master=frame_SD, text='Statistical Defense')
lbl_SDStaDef.grid(row=6, column=0, sticky='e')
lbl_SDStaDef_result = tk.Label(master=frame_SD, text='-------')
lbl_SDStaDef_result.grid(row=6, column=1)
frame_SD.grid(row=1, column=1)
frame_resultPhys = tk.Frame()
lbl_title_res_Phys = tk.Label(master=frame_resultPhys, text='Physical Damage', fg='red')
lbl_title_res_Phys.config(font=36)
lbl_title_res_Phys.grid(row=0, column=0, sticky='w')
lbl_min_Phys = tk.Label(master=frame_resultPhys, text='Min. Damage')
lbl_min_Phys.grid(row=1, column=0)
lbl_min_Phys_res = tk.Label(master=frame_resultPhys, text='--------')
lbl_min_Phys_res.grid(row=1, column=1)
lbl_max_Phys = tk.Label(master=frame_resultPhys, text='Max. Damage')
lbl_max_Phys.grid(row=2, column=0)
lbl_max_Phys_res = tk.Label(master=frame_resultPhys, text='--------')
lbl_max_Phys_res.grid(row=2, column=1)
frame_resultPhys.grid(row=2, column=0)
frame_resultSpec = tk.Frame()
lbl_title_res_Spec = tk.Label(master=frame_resultSpec, text='Special Damage', fg='red')
lbl_title_res_Spec.config(font=36)
lbl_title_res_Spec.grid(row=0, column=0, sticky='w')
lbl_min_Spec = tk.Label(master=frame_resultSpec, text='Min. Damage')
lbl_min_Spec.grid(row=1, column=0)
lbl_min_Spec_res = tk.Label(master=frame_resultSpec, text='--------')
lbl_min_Spec_res.grid(row=1, column=1)
lbl_max_Spec = tk.Label(master=frame_resultSpec, text='Max. Damage')
lbl_max_Spec.grid(row=2, column=0)
lbl_max_Spec_res = tk.Label(master=frame_resultSpec, text='--------')
lbl_max_Spec_res.grid(row=2, column=1)
frame_resultSpec.grid(row=2, column=1)
window.mainloop()